// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User model for registration and login
model User {
  id        String   @id @default(uuid())
  email     String   @unique
  password  String
  role      UserRole @default(user)
  profileId String   @unique @map("profile_id")
  profile   Profile  @relation(fields: [profileId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt() @map("updated_at")

  @@map("users")
}

// User profile model for additional user details
model Profile {
  id          String     @id @default(uuid())
  email       String     @unique
  fullName    String?
  bio         String?
  avatar      String?
  contactNo   String?
  gender      Gender?
  bloodGroup  String?
  designation String?
  isVerified  Boolean    @default(false) @map("is_verified")
  user        User?
  cart        Cart?
  reviews     Review[]
  bookings    Booking[]
  feedbacks   Feedback[]
  blogs       Blog[]
  createdAt   DateTime   @default(now()) @map("created_at")
  updatedAt   DateTime   @updatedAt() @map("updated_at")

  @@map("profiles")
}

model Category {
  id        String    @id @default(uuid())
  name      String
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt() @map("updated_at")
  services  Service[]

  @@map("categories")
}

// Service model for managing various services
model Service {
  id            String        @id @default(uuid())
  title         String
  description   String
  price         Float
  availableDate DateTime      @map("available_date")
  slots         Int
  thumbnail     String
  category      Category?     @relation(fields: [categoryId], references: [id])
  categoryId    String?
  status        ServiceStatus @default(ongoing)
  createdAt     DateTime      @default(now()) @map("created_at")
  updatedAt     DateTime      @updatedAt() @map("updated_at")
  booking       Booking?

  @@map("services")
}

// Booking model for handling user bookings
model Booking {
  id        String   @id @default(uuid())
  profile   Profile  @relation(fields: [profileId], references: [id])
  profileId String
  service   Service  @relation(fields: [serviceId], references: [id])
  serviceId String   @unique @map("service_id")
  date      DateTime
  status    Status   @default(pending)
  cartId    String   @map("cart_id")
  cart      Cart     @relation(fields: [cartId], references: [id])
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt() @map("updated_at")

  @@map("bookings")
}

model Cart {
  id        String    @id @default(uuid())
  profile   Profile   @relation(fields: [profileId], references: [id], onDelete: Cascade)
  profileId String    @unique
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt() @map("updated_at")
  Booking   Booking[]

  @@map("carts")
}

// Review model for user reviews and ratings
model Review {
  id        String   @id @default(uuid())
  profile   Profile  @relation(fields: [profileId], references: [id])
  profileId String   @map("profile_id")
  serviceId Int      @map("service_id")
  rating    Int // Rating can be on a scale of 1 to 5
  comment   String   @db.VarChar(255)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt() @map("updated_at")

  @@map("reviews")
}

// Feedback model for user feedbacks
model Feedback {
  id        String   @id @default(uuid())
  profile   Profile  @relation(fields: [profileId], references: [id])
  profileId String   @map("profile_id")
  comment   String   @db.VarChar(255)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt() @map("updated_at")

  @@map("feedbacks")
}

// Blog model for blog posts only admin
model Blog {
  id        String   @id @default(uuid())
  profileId String   @map("profile_id")
  profile   Profile  @relation(fields: [profileId], references: [id])
  title     String   @db.VarChar(255)
  body      String
  thumbnail String
  slug      String   @unique
  tagId     String   @map("tag_id")
  tag       Tag      @relation(fields: [tagId], references: [id])
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt() @map("updated_at")

  @@map("blogs")
}

// Faq model for frequently asked questions
model Faq {
  id        String   @id @default(uuid())
  title     String
  body      String   @db.VarChar(120)
  isActive  Boolean  @default(true) @map("is_active")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt() @map("updated_at")

  @@map("faqs")
}

model Tag {
  id        String   @id @default(uuid())
  name      String
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt() @map("updated_at")
  Blog      Blog[]

  @@map("tags")
}

// gender
enum Gender {
  male
  female
  others
}

// User roles
enum UserRole {
  user
  admin
  super_admin
}

// Booking status
enum Status {
  pending
  confirmed
  cancelled
  completed
}

// Service status
enum ServiceStatus {
  upcoming
  ongoing
}
